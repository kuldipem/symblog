<?php

namespace Blogger\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends EntityRepository {

    public function getLatestBlogs($limit = null) {
        $qb = $this->createQueryBuilder('b')
                ->select('b')
                ->addOrderBy('b.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()
                        ->getResult();
    }

    public function getTagFilter($tag) {
        $blogs = $this->createQueryBuilder("a")
                ->select()
                ->getQuery()
                ->getResult();

        $ids = array();

        foreach ($blogs as $blog) {
            $tags = explode(",", $blog->getTags());

            foreach ($tags as $key => $value) {
                $tags[$key] = trim($value);
//                echo "<br>".$value;
            }
            if (in_array($tag, $tags, TRUE)) {
                $ids[] = $blog->getId();
            }
//            if (array_search(trim($tag), $tags)) {
//                $ids[] = $blog->getId();
//            }
        }
//        print_r($ids);
//        exit();

        if (empty($ids)) {
            return null;
        }
        $qb = $this->createQueryBuilder('c');
        $filtedBlogs = $qb->select()->where($qb->expr()->in('c.id', $ids))->getQuery()->getResult();

        return $filtedBlogs;
    }
    
    public function getTagFilterQuery($tag) {
        $blogs = $this->createQueryBuilder("a")
                ->select()
                ->getQuery()
                ->getResult();

        $ids = array();
        
    

        foreach ($blogs as $blog) {
            $tags = explode(",", $blog->getTags());

            foreach ($tags as $key => $value) {
                $tags[$key] = strtolower(trim($value));
            }

            if (in_array(strtolower($tag), $tags, TRUE)) {
                $ids[] = $blog->getId();
            }
        }

        if (empty($ids)) {
            return null;
        }
     
        $qb = $this->createQueryBuilder('c');
        $filtedBlogsQuery = $qb->select()->where($qb->expr()->in('c.id', $ids))->getQuery();

        return $filtedBlogsQuery;
    }
    
    

    public function getTags() {
        $blogTags = $this->createQueryBuilder('b')
                ->select('b.tags')
                ->getQuery()
                ->getResult();

        $tags = array();
        foreach ($blogTags as $blogTag) {
            $tags = array_merge(explode(",", $blogTag['tags']), $tags);
        }

        foreach ($tags as &$tag) {
            $tag = strtolower(trim($tag));
        }

        return $tags;
    }
    
    public function getUniqueTags() {
        $blogTags = $this->createQueryBuilder('b')
                ->select('b.tags')
                ->getQuery()
                ->getResult();

        $tags = array();
        foreach ($blogTags as $blogTag) {
            $tags = array_merge(explode(",", $blogTag['tags']), $tags);
        }

        foreach ($tags as &$tag) {
            $tag = strtolower(trim($tag));
        }

        return array_unique($tags,SORT_STRING);
    }

    public function getTagWeights($tags) {
        $tagWeights = array();
        if (empty($tags))
            return $tagWeights;

        foreach ($tags as $tag) {
            $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1;
        }
        // Shuffle the tags
        uksort($tagWeights, function() {
            return rand() > rand();
        });

        $max = max($tagWeights);

        // Max of 5 weights
        $multiplier = ($max > 5) ? 5 / $max : 1;
        foreach ($tagWeights as &$tag) {
            $tag = ceil($tag * $multiplier);
        }

        return $tagWeights;
    }

    public function makeSearchOnBlog($filedName, $keyword) {
        $qb = $this->createQueryBuilder('b');
        $qur = $qb->select()->where($qb->expr()->like('b.' . $filedName, ':keyword'))->setParameter('keyword', '%' . $keyword . '%')->getQuery();
        return $qur->getResult();
    }

  

}
