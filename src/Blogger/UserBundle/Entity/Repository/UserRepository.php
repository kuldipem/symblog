<?php

namespace Blogger\UserBundle\Entity\Repository;

use Blogger\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface {

    public function loadUserByUsername($username) {

        $q = $this->createQueryBuilder('u')->where("u.username= :username OR u.email = :email")
                ->setParameter("username", $username)
                ->setParameter("email", $username)
                ->getQuery();

        try {
            $user = $q->getSingleResult();
        } catch (NoResultException $exc) {
            $message = sprintf('Unable to find User with UserName "%s".', $username);
            throw new UsernameNotFoundException($message, 0, $exc);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instance of "%s" is not supported', $class));
        }


        return $this->find($user->getId());
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    public static function isAuthorized($security_context) {
        if ($security_context->isGranted('IS_AUTHENTICATED_FULLY') || $security_context->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            return true;
        }
        return false;
    }

    public static function isFullyAuthorized($security_context) {
        if ($security_context->isGranted('IS_AUTHENTICATED_FULLY')) {
            return true;
        }
        return false;
    }

    public static function isRememberedAutorized($security_context) {
        if ($security_context->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            return true;
        }
        return false;
    }

    /**
     * @param Object  $user  UserObject
     * @param integer $limit Maximum record 
     * @todo Implement alredy exist friends query
     */
    public function getInpiredByUsers($user, $limit = 3) {
        if ($user) {

            /* GET  ARRAY OF SEND REQUEST USER'S ID ' */
            $requestSendUsers = $user->getSendFriendRequests();
            $requestSendUserIdArray = array();
            foreach ($requestSendUsers as $rs) {
                $requestSendUserIdArray[] = $rs->getRequestTo()->getId();
            }

            /* GET  ARRAY OF GET REQUEST USER'S ID ' */
            $requestGetUsers = $user->getGetFriendRequests();
            $requestGetUserIdArray = array();
            foreach ($requestGetUsers as $rs) {
                $requestGetUserIdArray[] = $rs->getRequestBy()->getId();
            }

            $qb = $this->createQueryBuilder('u');
            
         

            if(!empty($requestGetUserIdArray)){
                $qb->orWhere($qb->expr()->in("u.id",$requestGetUserIdArray));
            }
            
            if(!empty($requestSendUserIdArray)){
                $qb->orWhere($qb->expr()->in("u.id",$requestSendUserIdArray));
            }
            return  $qb->where('u.id!=:id')->setParameter("id", $user->getId())->setMaxResults($limit)->getQuery()->getResult();
        
            
        } else {
            
            return NULL;
        }
    }

}
